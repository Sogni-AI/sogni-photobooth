@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-900 text-white;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Extra styling for countdown, flash effect */
.countdown-overlay {
  @apply absolute inset-0 flex items-center justify-center text-7xl font-bold bg-black bg-opacity-50;
  z-index: 50;
}

.flash-overlay {
  @apply absolute inset-0 bg-white;
  z-index: 60;
  animation: flashAnimation 0.4s ease-in-out forwards;
}

@keyframes flashAnimation {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* Control panel at top-left */
.control-panel {
  @apply absolute top-4 left-4 bg-gray-800 bg-opacity-70 p-4 rounded-lg shadow-xl flex flex-col gap-3;
  z-index: 80;
}

.control-panel-row {
  @apply flex items-center gap-2;
}

/* Thumbnail gallery pinned at bottom across full width */
.thumbnail-gallery {
  @apply flex gap-3 p-3 overflow-x-auto bg-black bg-opacity-70;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 70;
}

/* Container for each thumbnail */
.thumbnail-container {
  @apply relative flex-shrink-0 w-[6rem] h-[6rem];
}

/* The actual thumbnail image */
.thumbnail {
  @apply cursor-pointer border-2 border-transparent hover:border-blue-500 w-full h-full object-cover object-center;
}

/* If this thumbnail is currently selected, add a blue outline */
.thumbnail.selected {
  @apply border-blue-500;
}

/* Fade-in effect for newly arrived thumbnails */
.thumbnail-fade {
  animation: fadeInThumb 0.8s ease-in;
}
@keyframes fadeInThumb {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* "X" delete button in top-left corner of the thumbnail */
.thumbnail-delete-button {
  @apply absolute top-0 left-0 text-white bg-gray-900 bg-opacity-70 p-1 rounded-br cursor-pointer hover:bg-opacity-90;
  font-weight: bold;
}

/* If multiple images in that set, show the count in bottom-right corner */
.stack-count {
  @apply absolute bottom-0 right-0 bg-black bg-opacity-70 text-xs text-white px-1 py-0.5 rounded-tl;
}

/* Selected photo container styled as a full-screen overlay */
.selected-photo-container {
  @apply fixed inset-0 flex items-center justify-center;
  z-index: 1000;
  background: rgba(0, 0, 0, 0.85);
}

/* 
   Preserve the original aspect ratio for the enlarged image
*/
.selected-photo-container img {
  @apply max-h-full max-w-full object-contain;
}

/* Photo stack index indicator top-right corner (e.g. "1/4") */
.stack-index-indicator {
  @apply absolute top-4 right-4 text-xl bg-black bg-opacity-70 py-1 px-2 rounded;
}

/* 
   We wrap the <video> in a .video-container that is full size,
   so we can position/transform the video as needed. 
*/
.video-container {
  @apply absolute inset-0 overflow-hidden;
}

/*
   The #webcam itself: fill container and preserve aspect ratio. 
   By default, we use object-fit: cover so it's as large as possible
   (this avoids letterboxing, but note it may crop a bit). 
*/
#webcam {
  @apply w-full h-full object-cover;
}

/* 
   -------------------------------
   iOS Safari fix for orientation
   -------------------------------
   If on iOS in portrait, the feed typically arrives sideways.
   We rotate the video 90deg to correct. We also swap width/height 
   to fill the container. 
*/
#webcam.ios-fix {
  /* Absolutely position within .video-container. */
  position: absolute;
  top: 50%;
  left: 50%;
  transform-origin: center center;
  /* We'll further tweak in the @media below */
}

/* Only apply this if iOS (through -webkit-touch-callout) AND in portrait mode */
@supports (-webkit-touch-callout: none) {
  @media screen and (orientation: portrait) {
    #webcam.ios-fix {
      transform: translate(-50%, -50%) rotate(90deg);
      width: 100vh;  /* we swap these to fill the screen in portrait */
      height: 100vw;
    }
  }

  @media screen and (orientation: landscape) {
    /* iOS in landscape might not need rotation, but let's keep it
       centered and fill horizontally. */
    #webcam.ios-fix {
      transform: translate(-50%, -50%) rotate(0deg);
      width: 100vw;
      height: 100vh;
    }
  }
}

/* -------------------------
   Drag-and-drop overlay
   ------------------------- */
.drag-overlay {
  @apply absolute inset-0 flex items-center justify-center bg-black bg-opacity-70 text-white;
  z-index: 100;
  pointer-events: none; /* This ensures the overlay doesn't block the drop itself */
}

.drag-overlay p {
  @apply text-2xl;
}
