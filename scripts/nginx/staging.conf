# Frontend Server Block
server {
    listen 80;
    server_name photobooth-staging.sogni.ai;

    root /var/www/photobooth-staging.sogni.ai/dist; # Path to your frontend build
    index index.html index.htm;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
    
    # Don't cache HTML
    location ~* \.(html)$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    }

    # Security headers (can be set at frontend level too)
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Custom error pages (optional)
    error_page 404 /404.html; # Ensure 404.html exists in your root
    error_page 500 502 503 504 /50x.html; # Ensure 50x.html exists
}

# Backend API Server Block
server {
    listen 80;
    server_name photobooth-api-staging.sogni.ai;

    client_max_body_size 50M; # Allow larger image uploads

    # CORS Headers - specific to requests from the frontend domain
    add_header 'Access-Control-Allow-Origin' 'https://photobooth-staging.sogni.ai' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Client-App-ID' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Handle OPTIONS preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # Security headers (can be set here too if API specific variations needed)
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    # X-Frame-Options might not be needed or desirable for an API

    location / {
        proxy_pass http://localhost:3002; # Backend runs on port 3002
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # For WebSockets if backend uses them directly
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # X-Forwarded-Proto will be set by Cloudflare to https, Nginx sees http here
        proxy_set_header X-Forwarded-Proto http; 

        # Buffering and SSE specific settings might be needed per location or here globally
        # For general API, these might be fine, but SSE needs careful handling
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Special configuration for SSE connections (if path differs from root or needs special handling)
    location /sogni/progress/ { # Assuming API domain, so no /api prefix needed here
        proxy_pass http://localhost:3002; # Path will be /sogni/progress/ on backend
        proxy_http_version 1.1;
        proxy_set_header Connection "keep-alive"; # SSE specific
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        
        # Critical SSE settings
        proxy_buffering off;
        proxy_cache off;
        proxy_read_timeout 86400s; # 24 hours
        chunked_transfer_encoding on;
        # Nginx versions >= 1.13.10 remove Connection header to upstream if it's empty string or "close"
        # Setting Connection to keep-alive here, and then possibly overridden for SSE in specific backend logic if needed,
        # or just rely on backend to handle SSE connection persistence.
        # If the backend itself handles SSE correctly without special Connection header from Nginx, it's simpler.
        # The server-level CORS headers should apply here.
    }
    
    # Health check passthrough (if your backend has /health at root)
    location = /health {
        proxy_pass http://localhost:3002/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        # Add other necessary proxy headers if backend /health expects them
        access_log off; # Don't log health checks if too noisy
    }
} 